{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TR\\\\Desktop\\\\ddswap-interface\\\\src\\\\components\\\\CurrencyLogo\\\\index.tsx\";\nimport { ChainId, ETHER, Token } from 'ddswap-sdk';\nimport React, { useMemo } from 'react';\nimport styled from 'styled-components';\nimport EthereumLogo from '../../assets/images/ethereum-logo.png';\nimport ConfluxLogo from '../../assets/images/conflux-logo.png';\nimport HtLogo from '../../assets/images/ht-logo.png';\nimport useHttpLocations from '../../hooks/useHttpLocations';\nimport { WrappedTokenInfo } from '../../state/lists/hooks';\nimport Logo from '../Logo';\nconsole.log(ChainId);\n\nconst getTokenLogoURL = address => `https://www.dsme.vip/assest/ethereum/assest/${address}/logo.png`;\n/*`https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${address}/logo.png`*/\n\n\nconst StyledEthereumLogo = styled.img`\n  width: ${({\n  size\n}) => size};\n  height: ${({\n  size\n}) => size};\n  box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.075);\n  border-radius: 24px;\n`;\nconst StyledLogo = styled(Logo)`\n  width: ${({\n  size\n}) => size};\n  height: ${({\n  size\n}) => size};\n`;\nexport default function CurrencyLogo({\n  currency,\n  size = '24px',\n  style\n}) {\n  var _currency$symbol;\n\n  const uriLocations = useHttpLocations(currency instanceof WrappedTokenInfo ? currency.logoURI : undefined);\n  const srcs = useMemo(() => {\n    if (currency === ETHER) return [];\n\n    if (currency instanceof Token) {\n      if (currency instanceof WrappedTokenInfo) {\n        return [...uriLocations, getTokenLogoURL(currency.address)];\n      }\n\n      return [getTokenLogoURL(currency.address)];\n    }\n\n    return [];\n  }, [currency, uriLocations]);\n\n  if (currency === ETHER) {\n    if (ETHER.symbol === \"ETH\") {\n      return /*#__PURE__*/React.createElement(StyledEthereumLogo, {\n        src: EthereumLogo,\n        size: size,\n        style: style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 14\n        }\n      });\n    } else if (ETHER.symbol === \"CFX\") {\n      return /*#__PURE__*/React.createElement(StyledEthereumLogo, {\n        src: ConfluxLogo,\n        size: size,\n        style: style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 14\n        }\n      });\n    } else if (ETHER.symbol === \"HT\") {\n      return /*#__PURE__*/React.createElement(StyledEthereumLogo, {\n        src: HtLogo,\n        size: size,\n        style: style,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 14\n        }\n      });\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(StyledLogo, {\n    size: size,\n    srcs: srcs,\n    alt: `${(_currency$symbol = currency === null || currency === void 0 ? void 0 : currency.symbol) !== null && _currency$symbol !== void 0 ? _currency$symbol : 'token'} logo`,\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 10\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/TR/Desktop/ddswap-interface/src/components/CurrencyLogo/index.tsx"],"names":["ChainId","ETHER","Token","React","useMemo","styled","EthereumLogo","ConfluxLogo","HtLogo","useHttpLocations","WrappedTokenInfo","Logo","console","log","getTokenLogoURL","address","StyledEthereumLogo","img","size","StyledLogo","CurrencyLogo","currency","style","uriLocations","logoURI","undefined","srcs","symbol"],"mappings":"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","sourcesContent":["import { ChainId, Currency, ETHER, Token } from 'ddswap-sdk'\nimport React, { useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport CHAINID from '../AccountDetails'\nimport EthereumLogo from '../../assets/images/ethereum-logo.png'\nimport ConfluxLogo from '../../assets/images/conflux-logo.png'\nimport HtLogo from '../../assets/images/ht-logo.png'\nimport useHttpLocations from '../../hooks/useHttpLocations'\nimport { WrappedTokenInfo } from '../../state/lists/hooks'\nimport Logo from '../Logo'\n\n\nconsole.log(ChainId)\nconst getTokenLogoURL = (address: string) =>\n  `https://www.dsme.vip/assest/ethereum/assest/${address}/logo.png`\n  /*`https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${address}/logo.png`*/\n\nconst StyledEthereumLogo = styled.img<{ size: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n  box-shadow: 0px 6px 10px rgba(0, 0, 0, 0.075);\n  border-radius: 24px;\n`\n\nconst StyledLogo = styled(Logo)<{ size: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n`\n\nexport default function CurrencyLogo({\n  currency,\n  size = '24px',\n  style\n}: {\n  currency?: Currency\n  size?: string\n  style?: React.CSSProperties\n}) {\n  const uriLocations = useHttpLocations(currency instanceof WrappedTokenInfo ? currency.logoURI : undefined)\n\n  const srcs: string[] = useMemo(() => {\n    if (currency === ETHER) return []\n\n    if (currency instanceof Token) {\n      if (currency instanceof WrappedTokenInfo) {\n        return [...uriLocations, getTokenLogoURL(currency.address)]\n      }\n\n      return [getTokenLogoURL(currency.address)]\n    }\n    return []\n  }, [currency, uriLocations])\n\n  if (currency === ETHER) {\n    if(ETHER.symbol === \"ETH\" ){\n      return <StyledEthereumLogo src={EthereumLogo} size={size} style={style} />\n    }else if(ETHER.symbol === \"CFX\" ){\n      return <StyledEthereumLogo src={ConfluxLogo} size={size} style={style} />\n    }else if(ETHER.symbol === \"HT\" ){\n      return <StyledEthereumLogo src={HtLogo} size={size} style={style} />\n    }\n  }\n\n  return <StyledLogo size={size} srcs={srcs} alt={`${currency?.symbol ?? 'token'} logo`} style={style} />\n}\n"]},"metadata":{},"sourceType":"module"}